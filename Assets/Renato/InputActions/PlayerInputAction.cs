//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Renato/InputActions/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""InputAction"",
            ""id"": ""8b02c550-3dfc-4363-a0d0-973599ca2083"",
            ""actions"": [
                {
                    ""name"": ""Move Action"",
                    ""type"": ""Value"",
                    ""id"": ""cb4da77b-0197-4a49-b26b-c4210397a338"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look Action"",
                    ""type"": ""Value"",
                    ""id"": ""31be9480-e741-461a-b0aa-54daa3dc026e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pickup Action"",
                    ""type"": ""Button"",
                    ""id"": ""14b0fd4e-0ec2-4a7b-8d8b-d4bcf881b751"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inspect Action"",
                    ""type"": ""Button"",
                    ""id"": ""d3233d60-d05c-48cb-9ce8-a2ee48d796b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate Input"",
                    ""type"": ""Value"",
                    ""id"": ""a2994fd7-5c6e-4e9b-b6ff-3a34a65211b4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""6fe9819d-434c-403c-96ed-ae101c7482d7"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Action"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e1f2257d-9c9e-4f8b-80e0-11daa7c32955"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fb60939b-c35c-476f-9807-1d6791675ec3"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""84dc3a4f-9703-48ca-8d43-8e2559bf8cb2"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7b1dba84-bad0-41b1-8d3e-01e33ef69798"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""fffca4d6-57d8-45b7-a0e2-eeccb0848dbb"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""a8d4eeb9-474f-402b-82f4-c537335739bf"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f0330f81-36af-4628-bc5f-f8e820c6b49c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look Action"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0558afb9-735d-49d4-9286-cd4acd650768"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c744a795-8989-4722-a76a-99f917d94d97"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e8cc6ad9-e7d3-45c2-b148-e5de79ed31b8"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""342d76f4-8dbc-460b-a1b2-df2b6f76e8c8"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""bff39e3d-0330-4fe2-9329-1c0b8975c7bc"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pickup Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a3512ca-261b-49eb-b633-f82d53073c5d"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inspect Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""7bd871ac-edb2-4f30-8dff-dff28ae04c76"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Input"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""861a0202-f156-42c7-83c8-c5f6ac2c9fa3"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Input"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3e68e9aa-1995-4403-b925-4b02bc2f4091"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Input"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8492494a-2fae-4a48-8703-94c8b9db8334"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Input"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""07f231bc-b4ba-4956-ae55-e6f388b8bc07"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Input"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InputAction
        m_InputAction = asset.FindActionMap("InputAction", throwIfNotFound: true);
        m_InputAction_MoveAction = m_InputAction.FindAction("Move Action", throwIfNotFound: true);
        m_InputAction_LookAction = m_InputAction.FindAction("Look Action", throwIfNotFound: true);
        m_InputAction_PickupAction = m_InputAction.FindAction("Pickup Action", throwIfNotFound: true);
        m_InputAction_InspectAction = m_InputAction.FindAction("Inspect Action", throwIfNotFound: true);
        m_InputAction_RotateInput = m_InputAction.FindAction("Rotate Input", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InputAction
    private readonly InputActionMap m_InputAction;
    private List<IInputActionActions> m_InputActionActionsCallbackInterfaces = new List<IInputActionActions>();
    private readonly InputAction m_InputAction_MoveAction;
    private readonly InputAction m_InputAction_LookAction;
    private readonly InputAction m_InputAction_PickupAction;
    private readonly InputAction m_InputAction_InspectAction;
    private readonly InputAction m_InputAction_RotateInput;
    public struct InputActionActions
    {
        private @PlayerInputAction m_Wrapper;
        public InputActionActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveAction => m_Wrapper.m_InputAction_MoveAction;
        public InputAction @LookAction => m_Wrapper.m_InputAction_LookAction;
        public InputAction @PickupAction => m_Wrapper.m_InputAction_PickupAction;
        public InputAction @InspectAction => m_Wrapper.m_InputAction_InspectAction;
        public InputAction @RotateInput => m_Wrapper.m_InputAction_RotateInput;
        public InputActionMap Get() { return m_Wrapper.m_InputAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputActionActions set) { return set.Get(); }
        public void AddCallbacks(IInputActionActions instance)
        {
            if (instance == null || m_Wrapper.m_InputActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputActionActionsCallbackInterfaces.Add(instance);
            @MoveAction.started += instance.OnMoveAction;
            @MoveAction.performed += instance.OnMoveAction;
            @MoveAction.canceled += instance.OnMoveAction;
            @LookAction.started += instance.OnLookAction;
            @LookAction.performed += instance.OnLookAction;
            @LookAction.canceled += instance.OnLookAction;
            @PickupAction.started += instance.OnPickupAction;
            @PickupAction.performed += instance.OnPickupAction;
            @PickupAction.canceled += instance.OnPickupAction;
            @InspectAction.started += instance.OnInspectAction;
            @InspectAction.performed += instance.OnInspectAction;
            @InspectAction.canceled += instance.OnInspectAction;
            @RotateInput.started += instance.OnRotateInput;
            @RotateInput.performed += instance.OnRotateInput;
            @RotateInput.canceled += instance.OnRotateInput;
        }

        private void UnregisterCallbacks(IInputActionActions instance)
        {
            @MoveAction.started -= instance.OnMoveAction;
            @MoveAction.performed -= instance.OnMoveAction;
            @MoveAction.canceled -= instance.OnMoveAction;
            @LookAction.started -= instance.OnLookAction;
            @LookAction.performed -= instance.OnLookAction;
            @LookAction.canceled -= instance.OnLookAction;
            @PickupAction.started -= instance.OnPickupAction;
            @PickupAction.performed -= instance.OnPickupAction;
            @PickupAction.canceled -= instance.OnPickupAction;
            @InspectAction.started -= instance.OnInspectAction;
            @InspectAction.performed -= instance.OnInspectAction;
            @InspectAction.canceled -= instance.OnInspectAction;
            @RotateInput.started -= instance.OnRotateInput;
            @RotateInput.performed -= instance.OnRotateInput;
            @RotateInput.canceled -= instance.OnRotateInput;
        }

        public void RemoveCallbacks(IInputActionActions instance)
        {
            if (m_Wrapper.m_InputActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputActionActions instance)
        {
            foreach (var item in m_Wrapper.m_InputActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputActionActions @InputAction => new InputActionActions(this);
    public interface IInputActionActions
    {
        void OnMoveAction(InputAction.CallbackContext context);
        void OnLookAction(InputAction.CallbackContext context);
        void OnPickupAction(InputAction.CallbackContext context);
        void OnInspectAction(InputAction.CallbackContext context);
        void OnRotateInput(InputAction.CallbackContext context);
    }
}
