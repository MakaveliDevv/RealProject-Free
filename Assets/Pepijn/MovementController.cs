//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Pepijn/MovementController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MovementController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MovementController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MovementController"",
    ""maps"": [
        {
            ""name"": ""Feet"",
            ""id"": ""2fb79b31-c3fe-455c-8483-373420706922"",
            ""actions"": [
                {
                    ""name"": ""MoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""c4fcc285-f7a8-4fd3-b0a6-1ad923fdf2c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveRigt"",
                    ""type"": ""Button"",
                    ""id"": ""7f40de44-3f84-4883-b1c0-27d8f45f2957"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""664576d7-bc65-474b-bcb9-e7e3a0595b04"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e33665e7-af0a-4b9b-9d89-a6aed8e75111"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRigt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Feet
        m_Feet = asset.FindActionMap("Feet", throwIfNotFound: true);
        m_Feet_MoveLeft = m_Feet.FindAction("MoveLeft", throwIfNotFound: true);
        m_Feet_MoveRigt = m_Feet.FindAction("MoveRigt", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Feet
    private readonly InputActionMap m_Feet;
    private List<IFeetActions> m_FeetActionsCallbackInterfaces = new List<IFeetActions>();
    private readonly InputAction m_Feet_MoveLeft;
    private readonly InputAction m_Feet_MoveRigt;
    public struct FeetActions
    {
        private @MovementController m_Wrapper;
        public FeetActions(@MovementController wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveLeft => m_Wrapper.m_Feet_MoveLeft;
        public InputAction @MoveRigt => m_Wrapper.m_Feet_MoveRigt;
        public InputActionMap Get() { return m_Wrapper.m_Feet; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FeetActions set) { return set.Get(); }
        public void AddCallbacks(IFeetActions instance)
        {
            if (instance == null || m_Wrapper.m_FeetActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FeetActionsCallbackInterfaces.Add(instance);
            @MoveLeft.started += instance.OnMoveLeft;
            @MoveLeft.performed += instance.OnMoveLeft;
            @MoveLeft.canceled += instance.OnMoveLeft;
            @MoveRigt.started += instance.OnMoveRigt;
            @MoveRigt.performed += instance.OnMoveRigt;
            @MoveRigt.canceled += instance.OnMoveRigt;
        }

        private void UnregisterCallbacks(IFeetActions instance)
        {
            @MoveLeft.started -= instance.OnMoveLeft;
            @MoveLeft.performed -= instance.OnMoveLeft;
            @MoveLeft.canceled -= instance.OnMoveLeft;
            @MoveRigt.started -= instance.OnMoveRigt;
            @MoveRigt.performed -= instance.OnMoveRigt;
            @MoveRigt.canceled -= instance.OnMoveRigt;
        }

        public void RemoveCallbacks(IFeetActions instance)
        {
            if (m_Wrapper.m_FeetActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFeetActions instance)
        {
            foreach (var item in m_Wrapper.m_FeetActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FeetActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FeetActions @Feet => new FeetActions(this);
    public interface IFeetActions
    {
        void OnMoveLeft(InputAction.CallbackContext context);
        void OnMoveRigt(InputAction.CallbackContext context);
    }
}
